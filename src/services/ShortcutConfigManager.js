  findCharacterByName(characterName, dofusClass) {
    // Trouve un profil de personnage par nom et classe
    for (const [windowId, profile] of Object.entries(this.config.characters)) {
      if (profile.character.toLowerCase() === characterName.toLowerCase() &&
        profile.class === dofusClass) {
        return { windowId, profile };
      }
    }
    return null;
  }

  // Shortcut validation
  isShortcutInUse(shortcut, excludeCharacterKey = null) {
    // Check character shortcuts
    for (const [characterKey, shortcutData] of Object.entries(this.config.shortcuts.characters)) {
      if (characterKey !== excludeCharacterKey && shortcutData.shortcut === shortcut) {
        return {
          type: 'character',
          characterKey,
          character: shortcutData.character,
          class: shortcutData.class,
          priority: this.getShortcutPriority(characterKey),
          autoGenerated: shortcutData.autoGenerated || false
        };
      }
    }

    // Check global shortcuts
    for (const [type, globalShortcut] of Object.entries(this.config.shortcuts.global)) {
      if (globalShortcut === shortcut) {
        return { 
          type: 'global', 
          shortcutType: type,
          priority: this.config.priorities.GLOBAL
        };
      }
    }

    return null;
  }

  // Migration and cleanup
  migrateFromElectronStore(electronStore) {
    try {
      console.log('ShortcutConfigManager: Starting migration from electron-store...');

      // Migrate window shortcuts - convertir en raccourcis de personnages
      const oldShortcuts = electronStore.get('shortcuts', {});
      const oldClasses = electronStore.get('classes', {});
      const oldCustomNames = electronStore.get('customNames', {});
      let migratedCount = 0;

      Object.keys(oldShortcuts).forEach(windowId => {
        const shortcut = oldShortcuts[windowId];
        const dofusClass = oldClasses[windowId] || 'feca';
        const character = oldCustomNames[windowId] || `Player_${windowId}`;

        if (shortcut) {
          const characterKey = this.generateCharacterKey(character, dofusClass);

          if (!this.config.shortcuts.characters[characterKey]) {
            this.config.shortcuts.characters[characterKey] = {
              shortcut: shortcut,
              character: character,
              class: dofusClass,
              windowId: windowId,
              priority: this.config.priorities.WINDOW,
              lastUsed: new Date().toISOString(),
              usageCount: 1,
              autoGenerated: false,
              migrated: true
            };
            migratedCount++;
          }
        }
      });

      // Migrate global shortcuts
      const oldGlobalShortcuts = electronStore.get('globalShortcuts', {});
      Object.keys(oldGlobalShortcuts).forEach(type => {
        const shortcut = oldGlobalShortcuts[type];
        if (shortcut && !this.config.shortcuts.global[type]) {
          this.config.shortcuts.global[type] = shortcut;
        }
      });

      // Migrate character data
      const oldInitiatives = electronStore.get('initiatives', {});

      Object.keys(oldClasses).forEach(windowId => {
        if (!this.config.characters[windowId]) {
          this.config.characters[windowId] = {
            character: oldCustomNames[windowId] || 'Unknown',
            class: oldClasses[windowId] || 'feca',
            initiative: oldInitiatives[windowId] || 0,
            lastSeen: new Date().toISOString(),
            windowId: windowId,
            migrated: true
          };
        }
      });

      if (migratedCount > 0) {
        this.saveConfig();
        console.log(`ShortcutConfigManager: Migrated ${migratedCount} shortcuts from electron-store`);
      }

      return migratedCount;
    } catch (error) {
      console.error('ShortcutConfigManager: Error during migration:', error);
      return 0;
    }
  }

  cleanupOldEntries(activeWindows) {
    // Met à jour les windowId pour les personnages actifs
    const characterUpdates = new Map();

    activeWindows.forEach(window => {
      const characterKey = this.generateCharacterKey(window.character, window.dofusClass);
      characterUpdates.set(characterKey, window.id);
    });

    // Met à jour les windowId dans les raccourcis de personnages
    let updatedCount = 0;
    Object.entries(this.config.shortcuts.characters).forEach(([characterKey, shortcutData]) => {
      const newWindowId = characterUpdates.get(characterKey);
      if (newWindowId && newWindowId !== shortcutData.windowId) {
        shortcutData.windowId = newWindowId;
        shortcutData.lastSeen = new Date().toISOString();
        updatedCount++;
      }
    });

    // Marque les raccourcis comme inactifs s'ils n'ont pas de fenêtre correspondante
    Object.entries(this.config.shortcuts.characters).forEach(([characterKey, shortcutData]) => {
      const hasActiveWindow = characterUpdates.has(characterKey);
      if (!hasActiveWindow && !shortcutData.inactive) {
        shortcutData.inactive = true;
        shortcutData.lastInactive = new Date().toISOString();
      } else if (hasActiveWindow && shortcutData.inactive) {
        delete shortcutData.inactive;
        delete shortcutData.lastInactive;
      }
    });

    // Supprime les raccourcis très anciens (plus de 30 jours d'inactivité)
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    let cleanedCount = 0;

    Object.keys(this.config.shortcuts.characters).forEach(characterKey => {
      const shortcutData = this.config.shortcuts.characters[characterKey];
      if (shortcutData.inactive && shortcutData.lastInactive) {
        const lastInactiveDate = new Date(shortcutData.lastInactive);
        if (lastInactiveDate < thirtyDaysAgo) {
          delete this.config.shortcuts.characters[characterKey];
          cleanedCount++;
        }
      }
    });

    if (updatedCount > 0 || cleanedCount > 0) {
      this.saveConfig();
      console.log(`ShortcutConfigManager: Updated ${updatedCount} character shortcuts, cleaned ${cleanedCount} old entries`);
    }

    return { updated: updatedCount, cleaned: cleanedCount };
  }

  // Export/Import functionality
  exportConfig() {
    return {
      ...this.config,
      exportedAt: new Date().toISOString()
    };
  }

  importConfig(importedConfig) {
    try {
      // Validate imported config
      if (!importedConfig.shortcuts || !importedConfig.version) {
        throw new Error('Invalid config format');
      }

      // Backup current config
      // const _backupConfig = { ...this.config }; // TODO: Implement backup logic

      // Merge imported config
      this.config = {
        ...this.config,
        ...importedConfig,
        shortcuts: {
          ...this.config.shortcuts,
          ...importedConfig.shortcuts,
          characters: {
            ...this.config.shortcuts.characters,
            ...importedConfig.shortcuts?.characters
          },
          global: {
            ...this.config.shortcuts.global,
            ...importedConfig.shortcuts?.global
          },
          autoKey: {
            ...this.config.shortcuts.autoKey,
            ...importedConfig.shortcuts?.autoKey
          }
        },
        priorities: {
          ...this.config.priorities,
          ...importedConfig.priorities
        },
        importedAt: new Date().toISOString()
      };

      this.saveConfig();
      console.log('ShortcutConfigManager: Successfully imported config');
      return true;
    } catch (error) {
      console.error('ShortcutConfigManager: Error importing config:', error);
      return false;
    }
  }

  // Statistics and debugging
  getStatistics() {
    const characterShortcuts = Object.keys(this.config.shortcuts.characters).length;
    const activeShortcuts = Object.values(this.config.shortcuts.characters)
      .filter(s => !s.inactive).length;
    const autoGeneratedShortcuts = Object.values(this.config.shortcuts.characters)
      .filter(s => s.autoGenerated).length;
    const characters = Object.keys(this.config.characters).length;

    return {
      totalCharacterShortcuts: characterShortcuts,
      activeCharacterShortcuts: activeShortcuts,
      inactiveCharacterShortcuts: characterShortcuts - activeShortcuts,
      autoGeneratedShortcuts: autoGeneratedShortcuts,
      manualShortcuts: characterShortcuts - autoGeneratedShortcuts,
      globalShortcuts: Object.keys(this.config.shortcuts.global).length,
      characters: characters,
      autoKeyEnabled: this.config.shortcuts.autoKey.enabled,
      autoKeyPattern: this.config.shortcuts.autoKey.pattern,
      configFile: this.configFile,
      lastUpdated: this.config.lastUpdated
    };
  }

  // Get config file path for debugging
  getConfigFilePath() {
    return this.configFile;
  }
}

module.exports = ShortcutConfigManager;